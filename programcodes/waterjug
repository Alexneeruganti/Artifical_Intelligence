from collections import deque

def water_jug_bfs(capacity1, capacity2, target):
    # Check if the target is achievable
    if target > max(capacity1, capacity2):
        return "Target cannot be achieved with these jugs."
    
    # Initialize BFS queue and visited set
    queue = deque([(0, 0)])  # Initial state: both jugs are empty
    visited = set(queue)
    path = {}  # To store the sequence of steps to reach each state

    while queue:
        jug1, jug2 = queue.popleft()

        # Check if we have reached the target
        if jug1 == target or jug2 == target:
            return reconstruct_path((jug1, jug2), path)

        # All possible states
        possible_states = [
            (capacity1, jug2),          # Fill Jug 1
            (jug1, capacity2),          # Fill Jug 2
            (0, jug2),                  # Empty Jug 1
            (jug1, 0),                  # Empty Jug 2
            (min(jug1 + jug2, capacity1), jug1 + jug2 - min(jug1 + jug2, capacity1)),  # Pour Jug 2 -> Jug 1
            (jug1 + jug2 - min(jug1 + jug2, capacity2), min(jug1 + jug2, capacity2))   # Pour Jug 1 -> Jug 2
        ]

        # Process each state
        for state in possible_states:
            if state not in visited:
                queue.append(state)
                visited.add(state)
                path[state] = (jug1, jug2)  # Store the previous state

    return "No solution found."

# Helper function to reconstruct the path from the path dictionary
def reconstruct_path(state, path):
    solution = []
    while state in path:
        solution.append(state)
        state = path[state]
    solution.append((0, 0))  # Start state
    solution.reverse()
    return solution

# Example Usage
jug1_capacity = 4
jug2_capacity = 3
target_amount = 2

solution = water_jug_bfs(jug1_capacity, jug2_capacity, target_amount)
if isinstance(solution, str):
    print(solution)
else:
    for step in solution:
        print(f"Jug 1: {step[0]}L, Jug 2: {step[1]}L")
