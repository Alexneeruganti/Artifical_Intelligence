def is_safe(board, row, col):
    # Check this column on previous rows
    for i in range(row):
        if board[i] == col or \
           board[i] - i == col - row or \
           board[i] + i == col + row:
            return False
    return True

def solve_queens(n):
    solutions = []
    board = [-1] * n  # Track queen positions by row; -1 means no queen placed

    def backtrack(row):
        if row == n:  # All queens are placed
            solutions.append(board[:])
            return
        for col in range(n):
            if is_safe(board, row, col):
                board[row] = col
                backtrack(row + 1)
                board[row] = -1  # Backtrack

    backtrack(0)
    return solutions

def print_solutions(solutions):
    for solution in solutions:
        for row in solution:
            print(" ".join("Q" if i == row else "." for i in range(len(solution))))
        print("\n" + "-" * (2 * len(solution) - 1) + "\n")

# Example Usage
n = 8
solutions = solve_queens(n)
print(f"Total solutions for {n}-Queens: {len(solutions)}\n")
print_solutions(solutions)
